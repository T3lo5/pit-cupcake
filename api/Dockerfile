# ==============================================================================
# DOCKERFILE COMPLETO PARA MONOREPO - CUPCAKES API
# ==============================================================================
# Este Dockerfile utiliza multi-stage build para otimizar o tamanho da imagem
# e melhorar a seguran√ßa em produ√ß√£o
# ==============================================================================

# Definir vers√£o do Node.js como argumento para facilitar atualiza√ß√µes
ARG NODE_VERSION=18.19.0

# ==============================================================================
# STAGE 1: Base - Configura√ß√£o base comum para todos os stages
# ==============================================================================
FROM node:${NODE_VERSION}-alpine AS base

# Instalar depend√™ncias do sistema necess√°rias
RUN apk add --no-cache \
    libc6-compat \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Configurar diret√≥rio de trabalho
WORKDIR /app

# Configurar usu√°rio n√£o-root para seguran√ßa
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nodejs

# ==============================================================================
# STAGE 2: Dependencies - Instalar depend√™ncias
# ==============================================================================
FROM base AS deps

# Copiar arquivos de configura√ß√£o de depend√™ncias
COPY package*.json ./
COPY tsconfig.json ./

# Instalar todas as depend√™ncias (incluindo devDependencies para build)
RUN npm ci --include=dev && npm cache clean --force

# ==============================================================================
# STAGE 3: Builder - Build da aplica√ß√£o
# ==============================================================================
FROM base AS builder

WORKDIR /app

# Copiar depend√™ncias do stage anterior
COPY --from=deps /app/node_modules ./node_modules

# Copiar c√≥digo fonte e arquivos de configura√ß√£o
COPY . .

# Gerar cliente Prisma
RUN npx prisma generate

# Executar linting e testes (opcional - remova se quiser build mais r√°pido)
# RUN npm run lint
# RUN npm run test:ci

# Build da aplica√ß√£o TypeScript
RUN npm run build

# Instalar apenas depend√™ncias de produ√ß√£o
RUN npm ci --only=production && npm cache clean --force

# ==============================================================================
# STAGE 4: Runtime - Imagem final de produ√ß√£o
# ==============================================================================
FROM base AS runtime

WORKDIR /app

# Configurar vari√°veis de ambiente
ENV NODE_ENV=production
ENV PORT=3000
ENV NPM_CONFIG_CACHE=/tmp/.npm

# Criar diret√≥rios necess√°rios com permiss√µes corretas
RUN mkdir -p /app/dist /app/logs /tmp/.npm && \
    chown -R nodejs:nodejs /app /tmp/.npm

# Copiar arquivos necess√°rios do builder
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./

# Copiar script de inicializa√ß√£o personalizado
COPY --chown=nodejs:nodejs <<EOF /app/start.sh
#!/bin/sh
set -e

echo "üöÄ Iniciando Cupcakes API..."

# Verificar se o banco de dados est√° acess√≠vel
echo "üìä Verificando conex√£o com banco de dados..."
npx prisma db push --accept-data-loss || {
    echo "‚ùå Erro ao conectar com banco de dados"
    exit 1
}

# Executar migra√ß√µes
echo "üîÑ Executando migra√ß√µes do banco..."
npx prisma migrate deploy || {
    echo "‚ùå Erro ao executar migra√ß√µes"
    exit 1
}

# Executar seed se necess√°rio (opcional)
# echo "üå± Executando seed do banco..."
# npm run seed || echo "‚ö†Ô∏è  Seed falhou, continuando..."

echo "‚úÖ Inicializa√ß√£o conclu√≠da!"
echo "üåê Iniciando servidor na porta \$PORT..."

# Iniciar aplica√ß√£o
exec node dist/server.js
EOF

# Tornar script execut√°vel
RUN chmod +x /app/start.sh

# Mudar para usu√°rio n√£o-root
USER nodejs

# Expor porta
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" || exit 1

# Labels para metadados
LABEL maintainer="Cupcakes API Team"
LABEL version="1.0.0"
LABEL description="API completa para sistema de cupcakes com Node.js, TypeScript e Prisma"

# Comando de inicializa√ß√£o usando dumb-init para gerenciamento correto de processos
ENTRYPOINT ["dumb-init", "--"]
CMD ["/app/start.sh"]
#!/bin/bash

# ==============================================================================
# Script de Valida√ß√£o - Cupcakes API Docker Setup
# ==============================================================================
# Este script valida se todos os componentes Docker est√£o funcionando corretamente

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Contadores
TESTS_PASSED=0
TESTS_FAILED=0

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

success() {
    echo -e "${GREEN}[‚úì] $1${NC}"
    ((TESTS_PASSED++))
}

error() {
    echo -e "${RED}[‚úó] $1${NC}"
    ((TESTS_FAILED++))
}

warning() {
    echo -e "${YELLOW}[!] $1${NC}"
}

# Fun√ß√£o para testar se um servi√ßo est√° rodando
test_service() {
    local service=$1
    local port=$2
    local timeout=${3:-10}
    
    log "Testando servi√ßo $service na porta $port..."
    
    if timeout $timeout bash -c "echo >/dev/tcp/localhost/$port" 2>/dev/null; then
        success "Servi√ßo $service est√° respondendo na porta $port"
        return 0
    else
        error "Servi√ßo $service n√£o est√° respondendo na porta $port"
        return 1
    fi
}

# Fun√ß√£o para testar endpoint HTTP
test_http_endpoint() {
    local url=$1
    local expected_status=${2:-200}
    local timeout=${3:-10}
    
    log "Testando endpoint: $url"
    
    if command -v curl &> /dev/null; then
        local status=$(curl -s -o /dev/null -w "%{http_code}" --max-time $timeout "$url" 2>/dev/null || echo "000")
        
        if [ "$status" = "$expected_status" ]; then
            success "Endpoint $url retornou status $status"
            return 0
        else
            error "Endpoint $url retornou status $status (esperado: $expected_status)"
            return 1
        fi
    else
        warning "curl n√£o est√° instalado, pulando teste HTTP"
        return 0
    fi
}

# Fun√ß√£o para testar container Docker
test_container() {
    local container=$1
    
    log "Verificando container $container..."
    
    if docker ps --format "table {{.Names}}" | grep -q "^$container$"; then
        local status=$(docker inspect --format='{{.State.Health.Status}}' "$container" 2>/dev/null || echo "unknown")
        
        if [ "$status" = "healthy" ] || [ "$status" = "unknown" ]; then
            success "Container $container est√° rodando"
            return 0
        else
            error "Container $container n√£o est√° saud√°vel (status: $status)"
            return 1
        fi
    else
        error "Container $container n√£o est√° rodando"
        return 1
    fi
}

# Fun√ß√£o principal de valida√ß√£o
run_validation() {
    echo ""
    echo "===================================="
    echo "üßÅ Cupcakes API - Valida√ß√£o Docker"
    echo "===================================="
    echo ""
    
    # Verificar se Docker est√° rodando
    log "Verificando se Docker est√° rodando..."
    if docker info &> /dev/null; then
        success "Docker est√° rodando"
    else
        error "Docker n√£o est√° rodando ou n√£o est√° acess√≠vel"
        exit 1
    fi
    
    # Verificar se Docker Compose est√° dispon√≠vel
    log "Verificando Docker Compose..."
    if command -v docker-compose &> /dev/null; then
        success "Docker Compose est√° dispon√≠vel"
    else
        error "Docker Compose n√£o est√° instalado"
        exit 1
    fi
    
    echo ""
    echo "üì¶ Testando Containers..."
    echo "========================"
    
    # Testar containers
    test_container "cupcakes-api"
    test_container "cupcakes-postgres"
    
    # Testar containers opcionais
    if docker ps --format "table {{.Names}}" | grep -q "cupcakes-redis"; then
        test_container "cupcakes-redis"
    else
        warning "Container Redis n√£o est√° rodando (opcional)"
    fi
    
    if docker ps --format "table {{.Names}}" | grep -q "cupcakes-nginx"; then
        test_container "cupcakes-nginx"
    else
        warning "Container Nginx n√£o est√° rodando (opcional)"
    fi
    
    if docker ps --format "table {{.Names}}" | grep -q "cupcakes-adminer"; then
        test_container "cupcakes-adminer"
    else
        warning "Container Adminer n√£o est√° rodando (opcional)"
    fi
    
    echo ""
    echo "üåê Testando Conectividade..."
    echo "============================"
    
    # Testar portas dos servi√ßos
    test_service "API" 3000
    test_service "PostgreSQL" 5432
    
    # Testar servi√ßos opcionais
    if docker ps --format "table {{.Names}}" | grep -q "cupcakes-redis"; then
        test_service "Redis" 6379
    fi
    
    if docker ps --format "table {{.Names}}" | grep -q "cupcakes-adminer"; then
        test_service "Adminer" 8080
    fi
    
    if docker ps --format "table {{.Names}}" | grep -q "cupcakes-nginx"; then
        test_service "Nginx HTTP" 80
        test_service "Nginx HTTPS" 443
    fi
    
    echo ""
    echo "üîç Testando Endpoints..."
    echo "======================="
    
    # Testar endpoints da API
    test_http_endpoint "http://localhost:3000/api/health" 200
    
    # Testar Adminer se estiver rodando
    if docker ps --format "table {{.Names}}" | grep -q "cupcakes-adminer"; then
        test_http_endpoint "http://localhost:8080" 200
    fi
    
    # Testar Nginx se estiver rodando
    if docker ps --format "table {{.Names}}" | grep -q "cupcakes-nginx"; then
        test_http_endpoint "http://localhost/health" 200
    fi
    
    echo ""
    echo "üóÑÔ∏è  Testando Banco de Dados..."
    echo "=============================="
    
    # Testar conex√£o com PostgreSQL
    log "Testando conex√£o com PostgreSQL..."
    if docker-compose exec -T postgres psql -U postgres -d cupcakes_db -c "SELECT 1;" &> /dev/null; then
        success "Conex√£o com PostgreSQL est√° funcionando"
    else
        error "N√£o foi poss√≠vel conectar com PostgreSQL"
    fi
    
    # Testar Prisma
    log "Testando Prisma..."
    if docker-compose exec -T cupcakes-api npx prisma db push --accept-data-loss &> /dev/null; then
        success "Prisma est√° funcionando corretamente"
    else
        error "Prisma n√£o est√° funcionando"
    fi
    
    echo ""
    echo "üìä Verificando Recursos..."
    echo "========================="
    
    # Verificar uso de mem√≥ria
    log "Verificando uso de mem√≥ria dos containers..."
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" | head -10
    
    # Verificar volumes
    log "Verificando volumes Docker..."
    if docker volume ls | grep -q "cupcakes"; then
        success "Volumes Docker est√£o criados"
        docker volume ls | grep "cupcakes"
    else
        warning "Nenhum volume espec√≠fico encontrado"
    fi
    
    # Verificar rede
    log "Verificando rede Docker..."
    if docker network ls | grep -q "cupcakes-network"; then
        success "Rede cupcakes-network est√° criada"
    else
        warning "Rede cupcakes-network n√£o encontrada"
    fi
    
    echo ""
    echo "=============================="
    echo "üìã Resumo da Valida√ß√£o"
    echo "=============================="
    echo -e "Testes passaram: ${GREEN}$TESTS_PASSED${NC}"
    echo -e "Testes falharam: ${RED}$TESTS_FAILED${NC}"
    
    if [ $TESTS_FAILED -eq 0 ]; then
        echo ""
        success "üéâ Todos os testes passaram! Sua aplica√ß√£o est√° funcionando corretamente."
        echo ""
        echo "üåê Acesse sua aplica√ß√£o em:"
        echo "   ‚Ä¢ API: http://localhost:3000"
        echo "   ‚Ä¢ Health Check: http://localhost:3000/api/health"
        
        if docker ps --format "table {{.Names}}" | grep -q "cupcakes-adminer"; then
            echo "   ‚Ä¢ Adminer: http://localhost:8080"
        fi
        
        if docker ps --format "table {{.Names}}" | grep -q "cupcakes-nginx"; then
            echo "   ‚Ä¢ Nginx: http://localhost"
        fi
        
        exit 0
    else
        echo ""
        error "‚ùå Alguns testes falharam. Verifique os logs acima para mais detalhes."
        echo ""
        echo "üí° Dicas para resolver problemas:"
        echo "   ‚Ä¢ Verifique se todos os servi√ßos est√£o rodando: docker-compose ps"
        echo "   ‚Ä¢ Veja os logs: docker-compose logs -f"
        echo "   ‚Ä¢ Reinicie os servi√ßos: docker-compose restart"
        echo "   ‚Ä¢ Reconstrua as imagens: docker-compose build --no-cache"
        
        exit 1
    fi
}

# Executar valida√ß√£o
run_validation
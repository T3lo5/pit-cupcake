# ==============================================================================
# VARIÁVEIS DE AMBIENTE PARA RENDER - CUPCAKES FULL STACK
# ==============================================================================
# Este arquivo contém exemplos das variáveis de ambiente necessárias
# para a aplicação Full Stack no Render
# ==============================================================================

# ==============================================================================
# VARIÁVEIS PRINCIPAIS (Configuradas automaticamente pelo render.yaml)
# ==============================================================================

# Ambiente de execução
NODE_ENV=production

# Porta da aplicação (Render configura automaticamente)
PORT=8080

# Database URL - Conectado automaticamente pelo render.yaml
# Exemplo: postgresql://username:password@hostname:port/database
DATABASE_URL=postgresql://user:password@hostname:5432/cupcakes

# JWT Secret - Gerado automaticamente pelo Render
JWT_SECRET=seu_jwt_secret_super_seguro_aqui_com_pelo_menos_32_caracteres

# CORS Origin - Configurado automaticamente para a própria URL do serviço
CORS_ORIGIN=https://seu-app.onrender.com

# URL da API para o frontend - Configurado automaticamente
VITE_API_URL=https://seu-app.onrender.com

# ==============================================================================
# VARIÁVEIS OPCIONAIS (Podem ser configuradas manualmente)
# ==============================================================================

# Configurações da API
API_VERSION=v1
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Configurações do Prisma
PRISMA_CLI_QUERY_ENGINE_TYPE=binary

# Configurações do frontend
VITE_APP_NAME=Cupcakes
VITE_APP_VERSION=1.0.0

# ==============================================================================
# CONFIGURAÇÃO NO RENDER - DUAS OPÇÕES
# ==============================================================================

# OPÇÃO 1: Blueprint (render.yaml) - RECOMENDADO
# As variáveis são configuradas automaticamente no arquivo render.yaml
# Apenas faça commit do arquivo e o Render configura tudo

# OPÇÃO 2: Manual no Dashboard
# 1. Acesse o dashboard do seu serviço no Render
# 2. Vá para a aba "Environment"
# 3. Adicione cada variável individualmente:
#    - Key: Nome da variável (ex: NODE_ENV)
#    - Value: Valor da variável (ex: production)
# 4. Clique em "Save Changes"

# ==============================================================================
# VARIÁVEIS PARA DESENVOLVIMENTO LOCAL
# ==============================================================================

# Para testes locais, use estas variáveis:
NODE_ENV=development
PORT=8080
DATABASE_URL=postgresql://cupcakes_user:cupcakes_pass@localhost:5432/cupcakes
JWT_SECRET=local_development_secret_key_123
CORS_ORIGIN=http://localhost:8080
VITE_API_URL=http://localhost:8080

# ==============================================================================
# CONFIGURAÇÃO AUTOMÁTICA NO RENDER.YAML
# ==============================================================================

# O arquivo render.yaml já configura automaticamente:
# ✅ NODE_ENV=production
# ✅ PORT=8080
# ✅ DATABASE_URL (conectado ao PostgreSQL)
# ✅ JWT_SECRET (gerado automaticamente)
# ✅ CORS_ORIGIN (URL do próprio serviço)
# ✅ VITE_API_URL (URL do próprio serviço)

# ==============================================================================
# VARIÁVEIS SENSÍVEIS - IMPORTANTE!
# ==============================================================================

# NUNCA commite valores reais das seguintes variáveis:
# ❌ DATABASE_URL (contém credenciais do banco)
# ❌ JWT_SECRET (chave de segurança)
# ❌ Qualquer API key ou senha

# ✅ Use o render.yaml para configuração automática
# ✅ Use valores seguros e únicos para produção
# ✅ Deixe o Render gerar secrets automaticamente

# ==============================================================================
# VERIFICAÇÃO DE CONFIGURAÇÃO
# ==============================================================================

# Após o deploy, verifique se as variáveis estão corretas:
# 1. Acesse: https://seu-app.onrender.com/health
# 2. Deve retornar status 200 com informações da aplicação
# 3. Se houver erro, verifique os logs no Render Dashboard

# ==============================================================================
# TROUBLESHOOTING
# ==============================================================================

# Problemas comuns e soluções:

# 1. Erro de conexão com banco:
#    - Verifique se DATABASE_URL está correta
#    - Confirme se o banco PostgreSQL foi criado
#    - Verifique logs para erros de migração

# 2. Erro de CORS:
#    - Verifique se CORS_ORIGIN está correto
#    - Confirme se aponta para a URL correta do serviço

# 3. Frontend não carrega API:
#    - Verifique se VITE_API_URL está correto
#    - Confirme se aponta para a mesma URL do serviço
#    - Teste endpoint: /api/health

# 4. JWT não funciona:
#    - Verifique se JWT_SECRET foi configurado
#    - Confirme se tem pelo menos 32 caracteres
#    - Use generateValue: true no render.yaml